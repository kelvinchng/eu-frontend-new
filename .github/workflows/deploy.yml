name: Deploy to AWS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: '20.x'
  AWS_REGION: 'ap-southeast-1'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Run tests
        if: false # Enable when tests are added
        run: npm test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "S3_BUCKET=${{ secrets.PROD_S3_BUCKET }}" >> $GITHUB_OUTPUT
            echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.PROD_CLOUDFRONT_DISTRIBUTION_ID }}" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
            echo "S3_BUCKET=${{ secrets.STAGING_S3_BUCKET }}" >> $GITHUB_OUTPUT
            echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.STAGING_CLOUDFRONT_DISTRIBUTION_ID }}" >> $GITHUB_OUTPUT
          fi

      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ secrets[format('{0}_API_URL', steps.set-env.outputs.ENVIRONMENT == 'production' && 'PROD' || 'STAGING')] }}" >> .env.production
          echo "NEXT_PUBLIC_GA_ID=${{ secrets.GA_TRACKING_ID }}" >> .env.production
          echo "NEXT_PUBLIC_ENVIRONMENT=${{ steps.set-env.outputs.ENVIRONMENT }}" >> .env.production

      - name: Build application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.set-env.outputs.ENVIRONMENT }}
          path: out/
          retention-days: 1

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "S3_BUCKET=${{ secrets.PROD_S3_BUCKET }}" >> $GITHUB_OUTPUT
            echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.PROD_CLOUDFRONT_DISTRIBUTION_ID }}" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
            echo "S3_BUCKET=${{ secrets.STAGING_S3_BUCKET }}" >> $GITHUB_OUTPUT
            echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.STAGING_CLOUDFRONT_DISTRIBUTION_ID }}" >> $GITHUB_OUTPUT
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ steps.set-env.outputs.ENVIRONMENT }}
          path: out/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync files to S3
        run: |
          aws s3 sync out/ s3://${{ steps.set-env.outputs.S3_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html" \
            --exclude "_next/data/*" \
            --exclude "_next/static/chunks/pages/*"
          
          # HTML files with shorter cache
          aws s3 sync out/ s3://${{ steps.set-env.outputs.S3_BUCKET }}/ \
            --exclude "*" \
            --include "*.html" \
            --include "_next/data/*" \
            --include "_next/static/chunks/pages/*" \
            --cache-control "public, max-age=0, must-revalidate" \
            --content-type "text/html; charset=utf-8"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.set-env.outputs.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            const env = '${{ steps.set-env.outputs.ENVIRONMENT }}';
            const message = `${status} Deployment to ${env} ${status === '✅' ? 'succeeded' : 'failed'}`;
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: message,
              context: `deploy/${env}`
            });